import streamlit as st

DOCUMENT = '''
# ゲーム説明書

## 概要
このゲームでは、プレイヤーがプログラムで定義したロジックを使ってロボットを操作します。他のロボットとの対戦を通じて、戦略的な判断力を試すことができます。

## ゲームの目的
- 自分のロボットを操作して、敵ロボットを倒すこと。
- ロボットの行動を計画し、効率的にエネルギーを使いながら勝利を目指しましょう。

## 基本ルール
1. **ロボットの初期状態**
    - HP (体力): 100
    - SP (エネルギー): 50
    - 攻撃力: 20
2. **行動のコスト**
    - 移動: SP 5 消費
    - 通常攻撃: SP 10 消費
    - 遠隔攻撃: SP 15 消費
    - 防御: SP 10 消費
    - 休息: SP 回復 15
3. **防御モード**
    - ダメージ軽減率: 50%
4. **勝敗条件**
    - 相手ロボットのHPを0にすることで勝利。
    - 自分のロボットのHPが0になると敗北。

## ロボットロジックの作成
プレイヤーは以下の関数を実装することで、自分のロボットの動きを定義します。

### 関数定義
```python
robot_logic(robot, enemy_position)
```
- **引数**:
  - `robot`: 自分のロボットを操作するオブジェクト。
  - `enemy_position`: 敵ロボットの現在位置。
- **戻り値**:
  - ロボットの行動を指示するコマンド。

### 使用可能なメソッド
#### Robot オブジェクト
- `move(dx, dy)`: 指定方向に移動します。
- `attack(target)`: 敵に通常攻撃を行います。
- `ranged_attack(target)`: 遠隔攻撃を行います。
- `defend()`: 防御モードを有効化します。
- `rest()`: エネルギーを回復します。

### 各行動の詳細な説明

1. **移動 (move)**  
   - **説明**: ロボットを指定した方向に移動させます。  
   - **引数**: `dx` (x方向の移動量), `dy` (y方向の移動量)  
   - **消費**: SP 5  
   - **例**: `robot.move(1, 0)` は右に1マス移動します。

2. **通常攻撃 (attack)**  
   - **説明**: 敵に近接攻撃を行います。  
   - **引数**: `target` (攻撃対象)  
   - **消費**: SP 10  
   - **例**: `robot.attack(enemy)` は敵に攻撃を行います。

3. **遠隔攻撃 (ranged_attack)**  
   - **説明**: 敵に遠隔攻撃を行います。近接攻撃より射程が長いです。  
   - **引数**: `target` (攻撃対象)  
   - **消費**: SP 15  
   - **例**: `robot.ranged_attack(enemy)` は敵を遠隔攻撃します。

4. **防御 (defend)**  
   - **説明**: 防御モードを有効にし、次のターンまでのダメージを軽減します。  
   - **引数**: なし  
   - **消費**: SP 10  
   - **例**: `robot.defend()` は防御モードを有効にします。

5. **休息 (rest)**  
   - **説明**: エネルギー (SP) を回復します。  
   - **引数**: なし  
   - **回復量**: SP +15  
   - **例**: `robot.rest()` はSPを回復します。

## ゲームの進め方
1. **ロジックの実装**
    - `robot_logic` 関数を作成し、ロボットの行動を決定します。
2. **ゲームの開始**
    - 実装したロジックをゲームに読み込んで、対戦を開始します。
3. **結果の確認**
    - 各ターンのログを通じて戦況を確認し、戦略を改善します。

## 注意事項
- ロボットのエネルギー管理が重要です。無駄な行動を避け、効率的に攻撃や防御を行いましょう。
- 敵の動きを予測し、適切に対応するロジックを作成することが勝利の鍵です。

## ゲームのカスタマイズ
- プレイヤーはロジック以外にも、ロボットのパラメータや行動コストを変更してゲームの難易度を調整することが可能です。

楽しんでプレイしてください！
'''


def main():
    # ページタイトル
    st.title("Manuel")
    st.markdown(DOCUMENT)


if __name__ == '__main__':
    main()